package com.example.gameleaderboard.service;

import com.example.gameleaderboard.dtos.LeaderboardDto;
import com.example.gameleaderboard.dtos.PlayerDetailsDto;
import com.example.gameleaderboard.rest.PlayerDetailsRestClient;
import com.example.gameleaderboard.service.implementation.ScoreServiceImpl;
import com.example.gameleaderboard.utils.LeaderboardBuilderUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
public class ScoreServiceTest {

    @InjectMocks
    ScoreServiceImpl scoreService;

    @Mock
    LeaderboardBuilderUtil leaderboardBuilderUtil;

    @Mock
    PlayerDetailsRestClient playerDetailsRestClient;

    Map<Integer, Set<String>> scoreToPlayersMap;

    LinkedList<Integer> topScores;

    Set<Integer> scoresSet;

    @BeforeEach
    public void setup(){
        scoreToPlayersMap = new HashMap();
        topScores = new LinkedList();
        scoresSet = new HashSet();
        ReflectionTestUtils.setField(scoreService, "scoresSet", scoresSet);
        ReflectionTestUtils.setField(scoreService, "topScores", topScores);
        ReflectionTestUtils.setField(scoreService, "scoreToPlayersMap", scoreToPlayersMap);
    }

    @Test
    void testGetScoreCacheFull(){
        topScores.add(0,5);
        topScores.add(0,15);
        topScores.add(0,25);
        topScores.add(0,35);
        topScores.add(0,45);
        List<PlayerDetailsDto> playerDetailsDtoList = new ArrayList<>();
        playerDetailsDtoList.add(PlayerDetailsDto.builder()
                .playerName("name1")
                .playerId("id1")
                .build());
        playerDetailsDtoList.add(PlayerDetailsDto.builder()
                .playerName("name2")
                .playerId("id2")
                .build());
        playerDetailsDtoList.add(PlayerDetailsDto.builder()
                .playerName("name3")
                .playerId("id3")
                .build());
        playerDetailsDtoList.add(PlayerDetailsDto.builder()
                .playerName("name4")
                .playerId("id4")
                .build());
        playerDetailsDtoList.add(PlayerDetailsDto.builder()
                .playerName("name5")
                .playerId("id5")
                .build());
        List<String> playerIdList = new ArrayList();
        playerIdList.addAll(Arrays.asList("id1","id2","id3","id4","id5"));
        when(playerDetailsRestClient.getPlayerDetails(anyList())).thenReturn(playerDetailsDtoList);
        when(leaderboardBuilderUtil.getTopPlayerIds()).thenReturn(playerIdList);
        List<LeaderboardDto> expected = scoreService.getTopScores();
        assertEquals(5, expected.size());

    }
}
